Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var serverstream_service_1 = require("../../../../frontendcommons/services/serverstream/serverstream.service");
require("rxjs/add/operator/repeatWhen");
require("rxjs/add/operator/takeUntil");
require("rxjs/add/operator/delay");
require("rxjs/add/operator/retryWhen");
require("rxjs/add/observable/of");
require("rxjs/add/observable/from");
var MessageCenterComponent = /** @class */ (function () {
    function MessageCenterComponent(serverstreamService) {
        this.serverstreamService = serverstreamService;
    }
    MessageCenterComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.serverStream$ = this.serverstreamService.getMessageList
            .subscribe(function (result) { return _this.messageList = result.ActorNotificationList; }, function (error) { return console.log(error); });
        // console.log(typeof this.serverStream$)
    };
    MessageCenterComponent.prototype.ngOnDestroy = function () {
        //console.log('msg destroyed');
        console.log(typeof this.serverStream$);
        this.serverStream$.unsubscribe();
    };
    MessageCenterComponent = __decorate([
        core_1.Component({
            selector: 'MessageCenter',
            moduleId: module.id,
            templateUrl: './messagecenter.component.html'
        }),
        __param(0, core_1.Inject(serverstream_service_1.ServerstreamService)),
        __metadata("design:paramtypes", [serverstream_service_1.ServerstreamService])
    ], MessageCenterComponent);
    return MessageCenterComponent;
}());
exports.MessageCenterComponent = MessageCenterComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZWNlbnRlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJtZXNzYWdlY2VudGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsc0NBQXdGO0FBTXhGLCtHQUE2RztBQUk3Ryx3Q0FBc0M7QUFDdEMsdUNBQXFDO0FBQ3JDLG1DQUFpQztBQUNqQyx1Q0FBcUM7QUFFckMsa0NBQWdDO0FBQ2hDLG9DQUFrQztBQVFsQztJQUlJLGdDQUFpRCxtQkFBd0M7UUFBeEMsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtJQUN6RixDQUFDO0lBRUQseUNBQVEsR0FBUjtRQUFBLGlCQU9DO1FBTkcsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsY0FBYzthQUN2RCxTQUFTLENBQ04sVUFBQSxNQUFNLElBQUksT0FBQSxLQUFJLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxxQkFBcUIsRUFBL0MsQ0FBK0MsRUFDekQsVUFBQSxLQUFLLElBQUksT0FBQSxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFsQixDQUFrQixDQUM5QixDQUFDO1FBQ1AseUNBQXlDO0lBQzVDLENBQUM7SUFDRCw0Q0FBVyxHQUFYO1FBQ0ksK0JBQStCO1FBQy9CLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDdkMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNyQyxDQUFDO0lBbkJRLHNCQUFzQjtRQUxsQyxnQkFBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLGVBQWU7WUFDekIsUUFBUSxFQUFFLE1BQU0sQ0FBQyxFQUFFO1lBQ25CLFdBQVcsRUFBRSxnQ0FBZ0M7U0FDaEQsQ0FBQztRQUtlLFdBQUEsYUFBTSxDQUFDLDBDQUFtQixDQUFDLENBQUE7eUNBQThCLDBDQUFtQjtPQUpoRixzQkFBc0IsQ0FxQmxDO0lBQUQsNkJBQUM7Q0FBQSxBQXJCRCxJQXFCQztBQXJCWSx3REFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIEluamVjdCwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEFjdG9ybm90aWZpY2F0aW9uU2VydmljZSB9IGZyb20gJy4uLy4uLy4uLy4uL2Zyb250ZW5kY29tbW9ucy9zZXJ2aWNlcy9hY3Rvcm5vdGlmaWNhdGlvbi9hY3Rvcm5vdGlmaWNhdGlvbi5zZXJ2aWNlJztcclxuaW1wb3J0IHtcclxuICAgIEFjdG9yTm90aWZpY2F0aW9uTGlzdEl0ZW0sXHJcbiAgICBHZXRBY3Rvck5vdGlmaWNhdGlvbnNSZXBseVxyXG59IGZyb20gJy4uLy4uLy4uLy4uL2Zyb250ZW5kY29tbW9ucy9tb2RlbHMvYWN0b3Jub3RpZmljYXRpb24nO1xyXG5pbXBvcnQgeyBTZXJ2ZXJzdHJlYW1TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vZnJvbnRlbmRjb21tb25zL3NlcnZpY2VzL3NlcnZlcnN0cmVhbS9zZXJ2ZXJzdHJlYW0uc2VydmljZSc7XHJcbmltcG9ydCB7IGVudmlyb25tZW50IH0gZnJvbSAnLi4vLi4vLi4vLi4vZW52aXJvbm1lbnRzL2Vudmlyb25tZW50LnByb2QnO1xyXG5pbXBvcnQgeyB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IEFwcEVycm9yIH0gZnJvbSAnLi4vLi4vLi4vLi4vZnJvbnRlbmRjb21tb25zL2Vycm9yaGFuZGxlci9hcHAtZXJyb3InO1xyXG5pbXBvcnQgJ3J4anMvYWRkL29wZXJhdG9yL3JlcGVhdFdoZW4nO1xyXG5pbXBvcnQgJ3J4anMvYWRkL29wZXJhdG9yL3Rha2VVbnRpbCc7XHJcbmltcG9ydCAncnhqcy9hZGQvb3BlcmF0b3IvZGVsYXknO1xyXG5pbXBvcnQgJ3J4anMvYWRkL29wZXJhdG9yL3JldHJ5V2hlbic7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzL09ic2VydmFibGUnO1xyXG5pbXBvcnQgJ3J4anMvYWRkL29ic2VydmFibGUvb2YnO1xyXG5pbXBvcnQgJ3J4anMvYWRkL29ic2VydmFibGUvZnJvbSc7XHJcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICdyeGpzL1N1YnNjcmliZXInO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ01lc3NhZ2VDZW50ZXInLFxyXG4gICAgbW9kdWxlSWQ6IG1vZHVsZS5pZCxcclxuICAgIHRlbXBsYXRlVXJsOiAnLi9tZXNzYWdlY2VudGVyLmNvbXBvbmVudC5odG1sJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgTWVzc2FnZUNlbnRlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcclxuICAgIG1lc3NhZ2VMaXN0OiBBcnJheTxBY3Rvck5vdGlmaWNhdGlvbkxpc3RJdGVtPjtcclxuICAgIHNlcnZlclN0cmVhbSQ7XHJcblxyXG4gICAgY29uc3RydWN0b3IoQEluamVjdChTZXJ2ZXJzdHJlYW1TZXJ2aWNlKSBwcml2YXRlIHNlcnZlcnN0cmVhbVNlcnZpY2U6IFNlcnZlcnN0cmVhbVNlcnZpY2UpIHtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uSW5pdCgpIHtcclxuICAgICAgICB0aGlzLnNlcnZlclN0cmVhbSQgPSB0aGlzLnNlcnZlcnN0cmVhbVNlcnZpY2UuZ2V0TWVzc2FnZUxpc3RcclxuICAgICAgICAgICAgLnN1YnNjcmliZShcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9PiB0aGlzLm1lc3NhZ2VMaXN0ID0gcmVzdWx0LkFjdG9yTm90aWZpY2F0aW9uTGlzdCxcclxuICAgICAgICAgICAgICAgIGVycm9yID0+IGNvbnNvbGUubG9nKGVycm9yKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgLy8gY29uc29sZS5sb2codHlwZW9mIHRoaXMuc2VydmVyU3RyZWFtJClcclxuICAgIH1cclxuICAgIG5nT25EZXN0cm95KCkge1xyXG4gICAgICAgIC8vY29uc29sZS5sb2coJ21zZyBkZXN0cm95ZWQnKTtcclxuICAgICAgICBjb25zb2xlLmxvZyh0eXBlb2YgdGhpcy5zZXJ2ZXJTdHJlYW0kKTtcclxuICAgICAgICB0aGlzLnNlcnZlclN0cmVhbSQudW5zdWJzY3JpYmUoKTtcclxuICAgIH1cclxuXHJcbn1cclxuIl19